-- Kingdom Death: Monster - Campaign Tracker Database Schema
-- This script is designed for SQLite.

-- =================================================================
-- Core Campaign and Settlement Tables
-- =================================================================

-- Stores high-level information about each campaign playthrough.
CREATE TABLE campaigns (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    current_year INTEGER DEFAULT 1,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

-- Stores the state of a settlement within a campaign.
CREATE TABLE settlements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    campaign_id INTEGER NOT NULL,
    name TEXT,
    population INTEGER DEFAULT 0,
    death_count INTEGER DEFAULT 0,
    survival_limit INTEGER DEFAULT 3,
    endeavors INTEGER DEFAULT 1,
    departure_bonus TEXT,
    return_bonus TEXT,
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id)
);

-- Tracks the major story events and timeline for a campaign.
CREATE TABLE timeline (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    campaign_id INTEGER NOT NULL,
    lantern_year INTEGER NOT NULL,
    story_event TEXT,
    settlement_event TEXT,
    status TEXT, -- e.g., 'Upcoming', 'Completed'
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id)
);

-- Tracks achieved settlement milestones and the resulting Principle choices.
CREATE TABLE settlement_milestones (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    settlement_id INTEGER NOT NULL,
    milestone_type TEXT NOT NULL, -- e.g., 'PRINCIPLE_NEW_LIFE'
    is_achieved INTEGER DEFAULT 0, -- 0 for false, 1 for true
    principle_choice TEXT,
    achieved_year INTEGER,
    FOREIGN KEY (settlement_id) REFERENCES settlements(id)
);

-- =================================================================
-- Survivor and Character Progression Tables
-- =================================================================

-- Stores the complete character sheet for every survivor.
CREATE TABLE survivors (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    settlement_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    gender TEXT,
    status TEXT DEFAULT 'Active',
    -- General Stats
    survival INTEGER DEFAULT 0,
    insanity INTEGER DEFAULT 0,
    hunt_xp INTEGER DEFAULT 0,
    courage INTEGER DEFAULT 0,
    understanding INTEGER DEFAULT 0,
    once_in_a_lifetime_reroll INTEGER DEFAULT 1, -- 1 for true, 0 for false
    impairments TEXT,
    -- Weapon Proficiency
    weapon_proficiency_type TEXT,
    weapon_proficiency_level INTEGER DEFAULT 0,
    -- Primary Stats
    movement INTEGER DEFAULT 5,
    accuracy INTEGER DEFAULT 0,
    strength INTEGER DEFAULT 0,
    evasion INTEGER DEFAULT 0,
    luck INTEGER DEFAULT 0,
    speed INTEGER DEFAULT 0,
    -- Hit Locations (Armor)
    armor_head INTEGER DEFAULT 0,
    armor_arms INTEGER DEFAULT 0,
    armor_body INTEGER DEFAULT 0,
    armor_waist INTEGER DEFAULT 0,
    armor_legs INTEGER DEFAULT 0,
    -- Hit Locations (Injury Status)
    injury_status_brain TEXT DEFAULT 'Normal',
    injury_status_head TEXT DEFAULT 'Normal',
    injury_status_arms TEXT DEFAULT 'Normal',
    injury_status_body TEXT DEFAULT 'Normal',
    injury_status_waist TEXT DEFAULT 'Normal',
    injury_status_legs TEXT DEFAULT 'Normal',
    FOREIGN KEY (settlement_id) REFERENCES settlements(id)
);

-- Master list of individual survivor bonuses from weapon proficiency.
CREATE TABLE weapon_proficiency_milestones (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    weapon_type TEXT NOT NULL,
    level INTEGER NOT NULL,
    bonus_description TEXT NOT NULL
);

-- Master list of settlement-wide bonuses from mastering a weapon type.
CREATE TABLE weapon_masteries (
    weapon_type TEXT PRIMARY KEY,
    mastery_bonus_description TEXT NOT NULL
);

-- Tracks which weapon masteries a settlement has unlocked.
CREATE TABLE settlement_weapon_masteries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    settlement_id INTEGER NOT NULL,
    weapon_type TEXT NOT NULL,
    is_unlocked INTEGER DEFAULT 0,
    unlocked_by_survivor_id INTEGER,
    unlocked_year INTEGER,
    FOREIGN KEY (settlement_id) REFERENCES settlements(id),
    FOREIGN KEY (weapon_type) REFERENCES weapon_masteries(weapon_type),
    FOREIGN KEY (unlocked_by_survivor_id) REFERENCES survivors(id)
);

-- Master list of all Fighting Arts.
CREATE TABLE fighting_arts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    type TEXT NOT NULL, -- 'Standard' or 'Secret'
    description TEXT,
    keywords TEXT
);

-- Links survivors to the Fighting Arts they have learned.
CREATE TABLE survivor_fighting_arts (
    survivor_id INTEGER NOT NULL,
    fighting_art_id INTEGER NOT NULL,
    PRIMARY KEY (survivor_id, fighting_art_id),
    FOREIGN KEY (survivor_id) REFERENCES survivors(id),
    FOREIGN KEY (fighting_art_id) REFERENCES fighting_arts(id)
);

-- Master list of all Disorders.
CREATE TABLE disorders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    keywords TEXT
);

-- Links survivors to the Disorders they have gained.
CREATE TABLE survivor_disorders (
    survivor_id INTEGER NOT NULL,
    disorder_id INTEGER NOT NULL,
    PRIMARY KEY (survivor_id, disorder_id),
    FOREIGN KEY (survivor_id) REFERENCES survivors(id),
    FOREIGN KEY (disorder_id) REFERENCES disorders(id)
);

-- Master list of all permanent, severe injuries.
CREATE TABLE severe_injuries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    hit_location TEXT,
    description TEXT
);

-- Links survivors to the severe injuries they have suffered.
CREATE TABLE survivor_severe_injuries (
    survivor_id INTEGER NOT NULL,
    severe_injury_id INTEGER NOT NULL,
    PRIMARY KEY (survivor_id, severe_injury_id),
    FOREIGN KEY (survivor_id) REFERENCES survivors(id),
    FOREIGN KEY (severe_injury_id) REFERENCES severe_injuries(id)
);

-- =================================================================
-- Monster and Showdown Tables
-- =================================================================

-- Master list of all monsters in the game.
CREATE TABLE monsters (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    is_nemesis INTEGER DEFAULT 0
);

-- Stores the stats for each level of a monster.
CREATE TABLE monster_levels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    monster_id INTEGER NOT NULL,
    level_name TEXT NOT NULL, -- e.g., '1', '2', 'First Story'
    movement INTEGER,
    toughness INTEGER,
    damage_modifier INTEGER DEFAULT 0,
    speed_modifier INTEGER DEFAULT 0,
    ai_deck_basic_count INTEGER,
    ai_deck_advanced_count INTEGER,
    ai_deck_legendary_count INTEGER,
    FOREIGN KEY (monster_id) REFERENCES monsters(id)
);

-- Master list of all AI cards for all monsters.
CREATE TABLE ai_cards (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    monster_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    type TEXT NOT NULL, -- 'Basic', 'Advanced', 'Legendary'
    subtype TEXT, -- 'Attack', 'Trait', 'Mood', 'Duration'
    FOREIGN KEY (monster_id) REFERENCES monsters(id)
);

-- Defines the ordered sequence of actions on an AI card.
CREATE TABLE ai_card_actions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ai_card_id INTEGER NOT NULL,
    step_number INTEGER NOT NULL,
    action_type TEXT NOT NULL, -- e.g., 'TARGETING', 'MOVEMENT', 'ATTACK'
    description TEXT,
    parameters TEXT, -- Machine-readable keywords/JSON
    FOREIGN KEY (ai_card_id) REFERENCES ai_cards(id)
);

-- Tracks the state of the AI deck for a specific showdown.
CREATE TABLE showdown_ai_deck (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    ai_card_id INTEGER NOT NULL,
    deck_position INTEGER,
    status TEXT NOT NULL, -- 'in_deck', 'in_discard', 'in_play', 'removed'
    FOREIGN KEY (hunt_id) REFERENCES hunts(id),
    FOREIGN KEY (ai_card_id) REFERENCES ai_cards(id)
);

-- Master list of all Hit Location cards.
CREATE TABLE hit_locations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    monster_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    is_trap INTEGER DEFAULT 0,
    reaction_always TEXT,
    reaction_on_failure TEXT,
    reaction_on_success TEXT,
    critical_wound_effect TEXT,
    keywords TEXT,
    FOREIGN KEY (monster_id) REFERENCES monsters(id)
);

-- Tracks the state of the Hit Location deck for a specific showdown.
CREATE TABLE showdown_hit_location_deck (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    hit_location_id INTEGER NOT NULL,
    is_drawn INTEGER DEFAULT 0,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id),
    FOREIGN KEY (hit_location_id) REFERENCES hit_locations(id)
);

-- Tracks persistent injuries a monster has during a specific showdown.
CREATE TABLE showdown_persistent_injuries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    injury_description TEXT NOT NULL,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id)
);

-- Tracks the position of all entities on the board during a showdown.
CREATE TABLE showdown_board_state (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    entity_type TEXT NOT NULL, -- 'survivor', 'monster', 'terrain'
    entity_id INTEGER NOT NULL,
    x_coord INTEGER,
    y_coord INTEGER,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id)
);

-- =================================================================
-- Hunt Phase Tables
-- =================================================================

-- Tracks a specific hunt encounter.
CREATE TABLE hunts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    campaign_id INTEGER NOT NULL,
    monster_id INTEGER NOT NULL,
    level INTEGER NOT NULL,
    is_successful INTEGER,
    lantern_year INTEGER NOT NULL,
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id),
    FOREIGN KEY (monster_id) REFERENCES monsters(id)
);

-- Links survivors to a specific hunt and tracks their outcome.
CREATE TABLE hunt_participants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    survivor_id INTEGER NOT NULL,
    died_during_hunt INTEGER DEFAULT 0,
    wounded_with_proficient_weapon INTEGER DEFAULT 0,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id),
    FOREIGN KEY (survivor_id) REFERENCES survivors(id)
);

-- Master list of all Hunt Event cards.
CREATE TABLE hunt_events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    type TEXT NOT NULL, -- 'Basic' or 'Monster-Specific'
    monster_id INTEGER,
    description TEXT,
    event_table_id INTEGER,
    FOREIGN KEY (monster_id) REFERENCES monsters(id),
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Tracks the state of the hunt event decks for a campaign.
CREATE TABLE campaign_hunt_decks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    campaign_id INTEGER NOT NULL,
    hunt_event_id INTEGER NOT NULL,
    quantity_available INTEGER,
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id),
    FOREIGN KEY (hunt_event_id) REFERENCES hunt_events(id)
);

-- Represents the layout of the hunt board for a specific hunt.
CREATE TABLE hunt_board_layout (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL,
    space_number INTEGER NOT NULL,
    hunt_event_id INTEGER,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id),
    FOREIGN KEY (hunt_event_id) REFERENCES hunt_events(id)
);

-- Tracks the dynamic state of a specific hunt in progress.
CREATE TABLE hunt_state (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hunt_id INTEGER NOT NULL UNIQUE,
    party_position INTEGER DEFAULT 0,
    monster_position INTEGER,
    FOREIGN KEY (hunt_id) REFERENCES hunts(id)
);

-- =================================================================
-- Gear, Resources, and Crafting Tables
-- =================================================================

-- Master list of all settlement locations.
CREATE TABLE locations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    event_table_id INTEGER,
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Tracks which locations a settlement has built.
CREATE TABLE settlement_locations (
    settlement_id INTEGER NOT NULL,
    location_id INTEGER NOT NULL,
    is_built INTEGER DEFAULT 0,
    PRIMARY KEY (settlement_id, location_id),
    FOREIGN KEY (settlement_id) REFERENCES settlements(id),
    FOREIGN KEY (location_id) REFERENCES locations(id)
);

-- Master list of all settlement innovations.
CREATE TABLE innovations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    type TEXT,
    description TEXT,
    benefit_description TEXT,
    event_table_id INTEGER,
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Tracks the state of innovations for a specific settlement.
CREATE TABLE settlement_innovations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    settlement_id INTEGER NOT NULL,
    innovation_id INTEGER NOT NULL,
    status TEXT NOT NULL, -- 'in_deck' or 'acquired'
    FOREIGN KEY (settlement_id) REFERENCES settlements(id),
    FOREIGN KEY (innovation_id) REFERENCES innovations(id)
);

-- Linking table for innovation consequences.
CREATE TABLE innovation_consequences (
    innovation_id INTEGER NOT NULL,
    consequence_keyword TEXT NOT NULL,
    PRIMARY KEY (innovation_id, consequence_keyword),
    FOREIGN KEY (innovation_id) REFERENCES innovations(id)
);

-- Master list of all gear.
CREATE TABLE gear (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    type TEXT,
    location_id INTEGER,
    innovation_id_req INTEGER,
    max_build_count INTEGER,
    activation_action TEXT,
    weapon_speed INTEGER,
    weapon_accuracy INTEGER,
    weapon_strength INTEGER,
    FOREIGN KEY (location_id) REFERENCES locations(id),
    FOREIGN KEY (innovation_id_req) REFERENCES innovations(id)
);

-- Maps equipped gear to a survivor's 3x3 grid.
CREATE TABLE survivor_gear_grid (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    survivor_id INTEGER NOT NULL,
    gear_id INTEGER NOT NULL,
    grid_x INTEGER NOT NULL,
    grid_y INTEGER NOT NULL,
    FOREIGN KEY (survivor_id) REFERENCES survivors(id),
    FOREIGN KEY (gear_id) REFERENCES gear(id)
);

-- Master list of all resources.
CREATE TABLE resources (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    type TEXT, -- 'Monster', 'Basic', 'Strange'
    monster_id INTEGER,
    consumable_action TEXT,
    event_table_id INTEGER,
    FOREIGN KEY (monster_id) REFERENCES monsters(id),
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Tracks resources temporarily held by a survivor.
CREATE TABLE survivor_resources (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    survivor_id INTEGER NOT NULL,
    resource_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    FOREIGN KEY (survivor_id) REFERENCES survivors(id),
    FOREIGN KEY (resource_id) REFERENCES resources(id)
);

-- Defines the crafting recipes for gear.
CREATE TABLE gear_recipes (
    gear_id INTEGER NOT NULL,
    resource_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (gear_id, resource_id),
    FOREIGN KEY (gear_id) REFERENCES gear(id),
    FOREIGN KEY (resource_id) REFERENCES resources(id)
);

-- Master list of all keywords.
CREATE TABLE keywords (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

-- Links gear to its keywords.
CREATE TABLE gear_keywords (
    gear_id INTEGER NOT NULL,
    keyword_id INTEGER NOT NULL,
    PRIMARY KEY (gear_id, keyword_id),
    FOREIGN KEY (gear_id) REFERENCES gear(id),
    FOREIGN KEY (keyword_id) REFERENCES keywords(id)
);

-- Links resources to their keywords.
CREATE TABLE resource_keywords (
    resource_id INTEGER NOT NULL,
    keyword_id INTEGER NOT NULL,
    PRIMARY KEY (resource_id, keyword_id),
    FOREIGN KEY (resource_id) REFERENCES resources(id),
    FOREIGN KEY (keyword_id) REFERENCES keywords(id)
);

-- Describes the affinity slots on a piece of gear.
CREATE TABLE gear_affinities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    gear_id INTEGER NOT NULL,
    color TEXT NOT NULL,
    direction TEXT NOT NULL, -- 'N', 'S', 'E', 'W', or 'Center'
    is_puzzle_piece INTEGER DEFAULT 0,
    FOREIGN KEY (gear_id) REFERENCES gear(id)
);

-- Describes gear bonuses activated by grid affinities.
CREATE TABLE gear_grid_bonuses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    gear_id INTEGER NOT NULL,
    required_affinity_color TEXT NOT NULL,
    required_affinity_count INTEGER NOT NULL,
    bonus_description TEXT,
    FOREIGN KEY (gear_id) REFERENCES gear(id)
);

-- Tracks the resources and gear owned by the settlement.
CREATE TABLE settlement_storage (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    settlement_id INTEGER NOT NULL,
    resource_id INTEGER,
    gear_id INTEGER,
    quantity INTEGER NOT NULL,
    FOREIGN KEY (settlement_id) REFERENCES settlements(id),
    FOREIGN KEY (resource_id) REFERENCES resources(id),
    FOREIGN KEY (gear_id) REFERENCES gear(id)
);

-- =================================================================
-- General Purpose and Utility Tables
-- =================================================================

-- Master list of all random event tables.
CREATE TABLE event_tables (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

-- Stores every possible result for every event table.
CREATE TABLE table_outcomes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    event_table_id INTEGER NOT NULL,
    min_roll INTEGER,
    max_roll INTEGER,
    outcome_description TEXT,
    outcome_keywords TEXT,
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Master list of all terrain cards.
CREATE TABLE terrain (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    placement_rules TEXT,
    total_in_deck INTEGER,
    event_table_id INTEGER,
    FOREIGN KEY (event_table_id) REFERENCES event_tables(id)
);

-- Links monsters to their required terrain setup.
CREATE TABLE monster_terrain_setup (
    monster_id INTEGER NOT NULL,
    terrain_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (monster_id, terrain_id),
    FOREIGN KEY (monster_id) REFERENCES monsters(id),
    FOREIGN KEY (terrain_id) REFERENCES terrain(id)
);

-- Tracks the state of the random terrain draw deck for a campaign.
CREATE TABLE campaign_terrain_deck (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    campaign_id INTEGER NOT NULL,
    terrain_id INTEGER NOT NULL,
    quantity_available INTEGER,
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id),
    FOREIGN KEY (terrain_id) REFERENCES terrain(id)
);
